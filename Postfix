#include <stdio.h>
#include <stdlib.h>

typedef double ElementType;
#define Infinity 1e8
#define Max_Expr 30   // max size of expression 

ElementType EvalPostfix( char *expr );

int main()
{
    ElementType v;
    char expr[Max_Expr];
    gets(expr);
    v = EvalPostfix( expr );
    if ( v < Infinity )
        printf("%f\n", v);
    else
        printf("ERROR\n");
    return 0;
}
ElementType EvalPostfix( char *expr )
{
    int i;
    ElementType stack[Max_Expr] = {0};
    int n = 0;
    int sign = 1;
    int PositiveExponent = 1;
    double NegativeExponent = 0.1;
    int decimal = 0;
    ElementType push = 0; 

    for(i = 0; i < Max_Expr; i++)
    {
        if (expr[i] == 0)break;
		switch(expr[i])
        {
            case ' ':
            break;
            case '+':
            {
                if(n < 2)return Infinity;
                n -= 2;
                stack[n] = stack[n] + stack[n+1];
                stack[n+1] = 0;
                //printf("+push:%lf\n",stack[n]);
                n++;
                break;
            }
            case '-':
            {
                
                if(expr[i+1] == ' '||expr[i+1] == 0)
                {
                	if(n < 2)return Infinity;
                    n -= 2;
                    stack[n] = stack[n] - stack[n+1];
                    stack[n+1] = 0;
                    //printf("-push:%lf\n",stack[n]);
                    n++;
                }
                else 
                {
                   sign = -1;
                }
                break;
            }
            case '*':
            {
                if(n < 2)return Infinity;
                n -= 2;
                stack[n] = stack[n] * stack[n+1];
                stack[n+1] = 0;
                //printf("*push:%lf\n",stack[n]);
                n++;
                break;
            }
            case '/':
            {
                if(n < 2)return Infinity;
                n -= 2;
                if(stack[n+1] == 0)return Infinity; 
                stack[n] = stack[n] / stack[n+1];
                stack[n+1] = 0;
                //printf("/push:%lf\n",stack[n]);
                n++;
                break;
            }
            default:
            {
                push = 0;
                PositiveExponent = 1;
                NegativeExponent = 0.1;
                while(expr[i] >= '0' && expr[i] <= '9' || expr[i] == '.')
                {
                    if(expr[i] == '.')
                    {
                        decimal = 1;
                        i++;
                        continue;
                    }
                    if(decimal)
                    {
                        push = push + (expr[i] - '0')* NegativeExponent;
                        NegativeExponent *= 0.1;
                        i++;
                    }
                    else 
                    {
                        push = push * PositiveExponent + expr[i] - '0';
                        PositiveExponent = 10;
                        i++;
                    }
                }
                stack[n] = push * sign;
                //printf("readpush:%lf\n",stack[n]);
                n++;
                sign = 1;
                decimal = 0;
                i--;
            }
        }
    }
    if(stack[1] != 0)
        return Infinity;
    else return stack[0];
}
